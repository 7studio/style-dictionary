/*
 * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

var path = require('path'),
    fs   = require('fs-extra'),
    chalk = require('chalk'),
    filterProperties = require('./filterProperties'),
    GroupMessages = require('./utils/groupMessages');

/**
 * Takes the style property object and a format and returns a
 * string that can be written to a file.
 * @memberOf StyleDictionary
 * @param {String} destination
 * @param {Function} format
 * @param {Object} platform
 * @param {Object} dictionary
 * @param {Function} filter
 * @returns {null}
 */
function buildFile(destination, format, platform, dictionary, filter) {
  if (!format || typeof format !== 'function')
    throw new Error('Please enter a valid file format');
  if (!destination || typeof destination !== 'string')
    throw new Error('Please enter a valid destination');

  var dest = destination;

  // if there is a build path, prepend the destination with it
  if (platform.buildPath) {
    destination = platform.buildPath + destination;
  }

  var dirname = path.dirname(destination);
  if (!fs.existsSync(dirname))
    fs.mkdirsSync(dirname);

  let filteredProperties = filterProperties(dictionary, filter);

  // Check for property name Collisions
  var nameCollisionObj = {};
  filteredProperties.allProperties && filteredProperties.allProperties.forEach((propertyData) => {
    let propertyName = propertyData.name;
    if(!nameCollisionObj[propertyName]) {
      nameCollisionObj[propertyName] = [];
    }
    nameCollisionObj[propertyName].push(propertyData);
  });

  var PROPERTY_NAME_COLLISION_WARNINGS = GroupMessages.GROUP.PropertyNameCollisionWarnings;
  var WARNING_COLOR = 'darkorange';
  var HIGHLIGHT_COLOR = 'orangered';
  var HELP_COLOR = 'orange';
  Object.keys(nameCollisionObj).map((propertyName) => {
    if(nameCollisionObj[propertyName].length > 1) {
      let collisions = nameCollisionObj[propertyName].map(properties => chalk.keyword(HIGHLIGHT_COLOR)(properties.path.join('.')) + '   ' + chalk.keyword(WARNING_COLOR)(properties.value)).join('\n        ');
      GroupMessages.add(
        PROPERTY_NAME_COLLISION_WARNINGS,
        `Output name ${chalk.keyword(HIGHLIGHT_COLOR).bold(propertyName)} was generated by:\n        ${collisions}`
      );
    }
  });

  let propertyNamesCollisionCount = GroupMessages.count(PROPERTY_NAME_COLLISION_WARNINGS);

  fs.writeFileSync(destination, format(filteredProperties, platform));
  console.log(chalk.bold.green((propertyNamesCollisionCount > 0) ? '⚠️ ' : '✔︎ ') + ' ' + destination);

  if(propertyNamesCollisionCount > 0) {
    var propertyNamesCollisionWarnings = GroupMessages.flush(PROPERTY_NAME_COLLISION_WARNINGS).join('\n    ');
    let title = `While building ${chalk.keyword(HIGHLIGHT_COLOR).bold(dest)}, token collisions were found; output may be unexpected.`;
    let help = chalk.keyword(HELP_COLOR)([
      'This many-to-one issue is usually caused by some combination of:',
          '* conflicting or similar paths/names in property definitions',
          '* platform transforms/transformGroups affecting names, especially when removing specificity',
          '* overly inclusive file filters',
    ].join('\n    '));
    let warn = `${title}\n    ${propertyNamesCollisionWarnings}\n${help}`;
    console.log(chalk.keyword(WARNING_COLOR).bold(warn));
  }
}


module.exports = buildFile;
